from bezier_curve import BezierCurve, make_control_point, newton_raphson
import sympy as sy
import datetime


def generate_lua(degree):
    control_points = [make_control_point(i) for i in range(degree + 1)]
    curve = BezierCurve(control_points)
    expr = curve.expr
    t = curve.t
    expr = expr.expand()
    poly0 = sy.Poly(sy.collect(expr[0], t), t)
    poly1 = sy.Poly(sy.collect(expr[1], t), t)
    coefs = sy.var(' '.join(f'c_{i}' for i in range(degree, -1, -1)))

    lua_code = f"""
lib._get_coefficients[{degree}] = function(control_points)
"""
    for i in range(degree + 1):
        lua_code += f"    local u_{i}, v_{i} = control_points[{i + 1}].x, control_points[{i + 1}].y\n"

    for coef, coef_x, coef_y in reversed(list(zip(coefs, poly0.all_coeffs(), poly1.all_coeffs()))):
        lua_code += f"    local {coef} = {{}}\n"
        lua_code += f"    {coef}.x = {coef_x}\n"
        lua_code += f"    {coef}.y = {coef_y}\n"

    lua_code += f"    return {{{', '.join(f'{coef}' for coef in reversed(coefs))}}}\n"
    lua_code += "end\n"

    return lua_code


if __name__ == '__main__':
    max_degree = 8
    with open('../scripts/generated/curve_coefficients.lua', 'w') as f:
        f.write(
            f'-- Generated by python script \'generate_coeficient_expressions.py\'\n-- {datetime.datetime.now().date()}\n\n')
        f.write('local lib = {}\n')
        f.write('lib._get_coefficients = {}\n')

        for degree in range(1, max_degree+1):
            f.write(generate_lua(degree))
            f.write('\n')

        f.write(f"""
--- @param control_points table<integer, Vector|nil>
--- @return table<integer, Vector>
function lib.get_coefficients(control_points)
    local degree = -1
    local cp = {{}}
    for _, point in ipairs(control_points) do
        if point then
            degree = degree + 1
            cp[degree+1] = {{x = point.x, y = point.y}}
        end
    end

    if degree > {max_degree} then
        error("Too many control points, max is {max_degree + 1}")
    elseif degree < 1 then
        error("Too few control points, at least 2 are required")
    end

    return lib._get_coefficients[degree](cp)
    end

return lib""")
